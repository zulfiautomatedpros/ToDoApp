// components/TodoList.tsx
"use client";

import { useTodos, Task } from "@/context/TodoContext";
import { useRef, useEffect, useMemo } from "react";
import { useRouter } from "next/navigation";

interface TodoListProps {
  filters: {
    status: ("pending" | "completed")[];
    date?: "today" | "overdue";
    categories: string[];
  };
}

export default function TodoList({ filters }: TodoListProps) {
  const { tasks, deleteTask, reorderTasks, updateTask } = useTodos();
  const router = useRouter();

  // Filter tasks according to filters
  const filteredTasks = useMemo(() => {
    return tasks.filter((task) => {
      // Status: "pending" means not completed; "completed" means completed.
      if (filters.status.length > 0) {
        const statusMatch =
          (filters.status.includes("pending") && !task.completed) ||
          (filters.status.includes("completed") && task.completed);
        if (!statusMatch) return false;
      }
      // Date filter: today or overdue.
      if (filters.date) {
        const today = new Date();
        if (!task.dueDate) return false;
        const taskDate = new Date(task.dueDate);
        if (filters.date === "today") {
          if (taskDate.toLocaleDateString() !== today.toLocaleDateString())
            return false;
        }
        if (filters.date === "overdue") {
          if (task.completed || taskDate.getTime() >= today.getTime())
            return false;
        }
      }
      // Category filter
      if (filters.categories.length > 0) {
        if (!filters.categories.includes(task.category)) return false;
      }
      return true;
    });
  }, [tasks, filters]);

  // Drag & drop handlers remain unchanged.
  const dragItem = useRef<number | null>(null);
  const dragOverItem = useRef<number | null>(null);

  const handleDragStart = (index: number) => {
    dragItem.current = index;
  };

  const handleDragEnter = (index: number) => {
    dragOverItem.current = index;
  };

  const handleDragEnd = () => {
    if (dragItem.current !== null && dragOverItem.current !== null) {
      reorderTasks(dragItem.current, dragOverItem.current);
    }
    dragItem.current = null;
    dragOverItem.current = null;
  };

  // Example: delete first task with Delete key.
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === "Delete" && tasks.length > 0) {
        if (window.confirm("Are you sure you want to delete the first task?")) {
          deleteTask(tasks[0].id);
        }
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [tasks, deleteTask]);

  const handleToggleComplete = (task: Task) => {
    updateTask({ ...task, completed: !task.completed, updatedAt: new Date().toISOString() });
  };

  return (
    <div className="space-y-2">
      {filteredTasks.map((task, index) => (
        <div
          key={`${task.id}-${index}`}  // Unique key generated by combining task.id and index
          draggable
          onDragStart={() => handleDragStart(index)}
          onDragEnter={() => handleDragEnter(index)}
          onDragEnd={handleDragEnd}
          className="p-4 bg-white dark:bg-gray-700 rounded shadow flex justify-between items-center cursor-move"
        >
          <div>
            <h3 className={`font-bold ${task.completed ? "line-through" : ""}`}>
              {task.title}
            </h3>
            <p className="text-sm">{task.description}</p>
            {task.dueDate && (
              <small className="text-gray-500">
                Due: {new Date(task.dueDate).toLocaleDateString()}
              </small>
            )}
          </div>
          <div className="space-x-2">
            <button
              onClick={() => handleToggleComplete(task)}
              className="px-2 py-1 bg-blue-500 text-white rounded"
            >
              {task.completed ? "Undo" : "Complete"}
            </button>
            <button
              onClick={() => router.push(`/edit-task/${task.id}`)}
              className="px-2 py-1 bg-yellow-500 text-white rounded"
            >
              Edit
            </button>
            <button
              onClick={() => {
                if (window.confirm("Are you sure you want to delete this task?")) {
                  deleteTask(task.id);
                }
              }}
              className="px-2 py-1 bg-red-500 text-white rounded"
            >
              Delete
            </button>
          </div>
        </div>
      ))}
    </div>
  );
}
